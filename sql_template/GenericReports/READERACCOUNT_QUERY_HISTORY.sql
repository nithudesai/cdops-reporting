--liquibase formatted sql
--preconditions onFail:HALT onError:HALT

--changeset READERACCOUNT_QUERY_HISTORY:1 runOnChange:true stripComments:true
--labels: "READERACCOUNT_QUERY_HISTORY or GENERIC"

CREATE TRANSIENT TABLE IF NOT EXISTS CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE (
	SH_KEY BINARY(20) CONSTRAINT UKEY_1 UNIQUE,
	ACCOUNT_LOCATOR VARCHAR(16777216),
	REGION_NAME VARCHAR(16777216),
	READER_ACCOUNT_NAME VARCHAR(16777216),
    QUERY_ID VARCHAR(16777216),
    QUERY_TEXT VARCHAR(16777216),
    QUERY_TYPE VARCHAR(16777216),
    SESSION_ID NUMBER(38,0),
    USER_NAME VARCHAR(16777216),
    ROLE_NAME VARCHAR(16777216),
    SCHEMA_ID NUMBER(38,0),
    SCHEMA_NAME VARCHAR(16777216),
    DATABASE_ID NUMBER(38,0),
    DATABASE_NAME VARCHAR(16777216),
    WAREHOUSE_ID NUMBER(38,0),
    WAREHOUSE_NAME VARCHAR(16777216),
    WAREHOUSE_SIZE VARCHAR(16777216),
    WAREHOUSE_TYPE VARCHAR(16777216),
    CLUSTER_NUMBER NUMBER(38,0),
    QUERY_TAG VARCHAR(16777216),
    EXECUTION_STATUS VARCHAR(16777216),
    ERROR_CODE VARCHAR(16777216),
    ERROR_MESSAGE VARCHAR(16777216),
    START_TIME TIMESTAMP_LTZ(6),
    END_TIME TIMESTAMP_LTZ(6),
    TOTAL_ELAPSED_TIME NUMBER(38,0),
    BYTES_SCANNED NUMBER(38,0),
    ROWS_PRODUCED NUMBER(38,0),
    COMPILATION_TIME NUMBER(38,0),
    EXECUTION_TIME NUMBER(38,0),
    QUEUED_PROVISIONING_TIME VARIANT,
    QUEUED_REPAIR_TIME VARIANT,
    QUEUED_OVERLOAD_TIME VARIANT,
    TRANSACTION_BLOCKED_TIME VARIANT,
    OUTBOUND_DATA_TRANSFER_CLOUD VARCHAR(16777216),
    OUTBOUND_DATA_TRANSFER_REGION VARCHAR(16777216),
    OUTBOUND_DATA_TRANSFER_BYTES NUMBER(38,0),
    INBOUND_DATA_TRANSFER_CLOUD VARCHAR(16777216),
    INBOUND_DATA_TRANSFER_REGION VARCHAR(16777216),
    INBOUND_DATA_TRANSFER_BYTES NUMBER(38,0),
    LIST_EXTERNAL_FILES_TIME NUMBER(38,0),
    CREDITS_USED_CLOUD_SERVICES FLOAT,
    READER_ACCOUNT_DELETED_ON TIMESTAMP_LTZ(6),
    ORGANIZATION_NAME  VARCHAR(16777216),
    CONSTRAINT PKEY_1 PRIMARY KEY (ACCOUNT_LOCATOR,REGION_NAME,READER_ACCOUNT_NAME,QUERY_ID),
    CONSTRAINT FKEY_1 FOREIGN KEY (ACCOUNT_LOCATOR,REGION_NAME,READER_ACCOUNT_NAME,WAREHOUSE_NAME) REFERENCES CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_WAREHOUSE_CREDIT_DATA_FL_TABLE (ACCOUNT_LOCATOR,REGION_NAME,READER_ACCOUNT_NAME,WAREHOUSE_NAME)
);

--Override CDOPS Variables
--UPDATE CDOPS_STATESTORE.REPORTING.CDOPS_VARIABLES SET VAR_VALUE='USING CRON 0 */3 * * * UTC'
--WHERE
--ACCOUNT_LOCATOR=CURRENT_ACCOUNT() AND
--REGION_NAME=CURRENT_REGION() AND
--VAR_USAGE='TASK_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL',
--VAR_NAME='TASK_SCHEDULE';

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL SUSPEND;

CREATE OR REPLACE PROCEDURE CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL()
  returns string not null
  language javascript
  as
  '
    const sql_begin_trans = snowflake.createStatement({ sqlText:`BEGIN TRANSACTION;`});
    const sql_commit_trans = snowflake.createStatement({ sqlText:`COMMIT;`});
    try{
        sql_begin_trans.execute();
        const my_sql_command_1 =`CREATE OR REPLACE TEMPORARY TABLE CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE_TEMP AS
                                 SELECT
                                    sha1_binary( concat( current_region(),\'|\', T.ACCOUNT_LOCATOR,\'|\', QH.query_id, \'|\', QH.READER_ACCOUNT_NAME) ) SH_KEY,
                                    T.ACCOUNT_LOCATOR AS ACCOUNT_LOCATOR,CURRENT_REGION() AS REGION_NAME,
                                    QH.READER_ACCOUNT_NAME,QH.QUERY_ID,QH.QUERY_TEXT,
                                    QH.QUERY_TYPE,QH.SESSION_ID,QH.USER_NAME,QH.ROLE_NAME,QH.SCHEMA_ID,QH.SCHEMA_NAME,QH.DATABASE_ID,
                                    QH.DATABASE_NAME,QH.WAREHOUSE_ID,QH.WAREHOUSE_NAME,QH.WAREHOUSE_SIZE,QH.WAREHOUSE_TYPE,
                                    QH.CLUSTER_NUMBER,QH.QUERY_TAG,QH.EXECUTION_STATUS,QH.ERROR_CODE,QH.ERROR_MESSAGE,QH.START_TIME,
                                    QH.END_TIME,QH.TOTAL_ELAPSED_TIME,QH.BYTES_SCANNED,QH.ROWS_PRODUCED,QH.COMPILATION_TIME,
                                    QH.EXECUTION_TIME,QH.QUEUED_PROVISIONING_TIME,QH.QUEUED_REPAIR_TIME,QH.QUEUED_OVERLOAD_TIME,
                                    QH.TRANSACTION_BLOCKED_TIME,QH.OUTBOUND_DATA_TRANSFER_CLOUD,QH.OUTBOUND_DATA_TRANSFER_REGION,
                                    QH.OUTBOUND_DATA_TRANSFER_BYTES,QH.INBOUND_DATA_TRANSFER_REGION,QH.INBOUND_DATA_TRANSFER_BYTES,
                                    QH.LIST_EXTERNAL_FILES_TIME,QH.CREDITS_USED_CLOUD_SERVICES,QH.READER_ACCOUNT_DELETED_ON,T.VAR_VALUE AS ORGANIZATION_NAME
                                 FROM SNOWFLAKE.READER_ACCOUNT_USAGE.QUERY_HISTORY QH , table(get_var(\'ORGANIZATION\',\'GLOBAL\',CURRENT_ACCOUNT(),CURRENT_REGION())) T
                                 WHERE QH.start_time >= (SELECT NVL(MAX(START_TIME),DATEADD(MONTH,-12,CURRENT_DATE)) FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE);
                                `

        const statement_1 = snowflake.createStatement( {sqlText: my_sql_command_1} );
        const result_set_1 = statement_1.execute();

        const my_sql_command_2 = `MERGE INTO CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE T USING CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE_TEMP S
                                  ON (T.SH_KEY = S.SH_KEY)
                                  WHEN NOT MATCHED THEN
                                  INSERT (
                                    SH_KEY,ACCOUNT_LOCATOR,REGION_NAME,READER_ACCOUNT_NAME,QUERY_ID,QUERY_TEXT,QUERY_TYPE,
                                    SESSION_ID,USER_NAME,ROLE_NAME,SCHEMA_ID,SCHEMA_NAME,DATABASE_ID,DATABASE_NAME,WAREHOUSE_ID,
                                    WAREHOUSE_NAME,WAREHOUSE_SIZE,WAREHOUSE_TYPE,CLUSTER_NUMBER,QUERY_TAG,EXECUTION_STATUS,
                                    ERROR_CODE,ERROR_MESSAGE,START_TIME,END_TIME,TOTAL_ELAPSED_TIME,BYTES_SCANNED,
                                    ROWS_PRODUCED,COMPILATION_TIME,EXECUTION_TIME,QUEUED_PROVISIONING_TIME,QUEUED_REPAIR_TIME,
                                    QUEUED_OVERLOAD_TIME,TRANSACTION_BLOCKED_TIME,OUTBOUND_DATA_TRANSFER_CLOUD,OUTBOUND_DATA_TRANSFER_REGION,
                                    OUTBOUND_DATA_TRANSFER_BYTES,INBOUND_DATA_TRANSFER_REGION,INBOUND_DATA_TRANSFER_BYTES,LIST_EXTERNAL_FILES_TIME,
                                    CREDITS_USED_CLOUD_SERVICES,READER_ACCOUNT_DELETED_ON,ORGANIZATION_NAME
                                  )
                                  VALUES (
                                    S.SH_KEY,S.ACCOUNT_LOCATOR,S.REGION_NAME,S.READER_ACCOUNT_NAME,S.QUERY_ID,S.QUERY_TEXT,S.QUERY_TYPE,
                                    S.SESSION_ID,S.USER_NAME,S.ROLE_NAME,S.SCHEMA_ID,S.SCHEMA_NAME,S.DATABASE_ID,S.DATABASE_NAME,S.WAREHOUSE_ID,
                                    S.WAREHOUSE_NAME,S.WAREHOUSE_SIZE,S.WAREHOUSE_TYPE,S.CLUSTER_NUMBER,S.QUERY_TAG,S.EXECUTION_STATUS,
                                    S.ERROR_CODE,S.ERROR_MESSAGE,S.START_TIME,S.END_TIME,S.TOTAL_ELAPSED_TIME,S.BYTES_SCANNED,S.ROWS_PRODUCED,
                                    S.COMPILATION_TIME,S.EXECUTION_TIME,S.QUEUED_PROVISIONING_TIME,S.QUEUED_REPAIR_TIME,S.QUEUED_OVERLOAD_TIME,
                                    S.TRANSACTION_BLOCKED_TIME,S.OUTBOUND_DATA_TRANSFER_CLOUD,S.OUTBOUND_DATA_TRANSFER_REGION,S.OUTBOUND_DATA_TRANSFER_BYTES,
                                    S.INBOUND_DATA_TRANSFER_REGION,S.INBOUND_DATA_TRANSFER_BYTES,S.LIST_EXTERNAL_FILES_TIME,S.CREDITS_USED_CLOUD_SERVICES,
                                    S.READER_ACCOUNT_DELETED_ON,S.ORGANIZATION_NAME
                                  )
                                 `

        const statement_2 = snowflake.createStatement( {sqlText: my_sql_command_2} );
        const result_set_2 = statement_2.execute();

        const my_sql_command_3 = "DELETE FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE " +
                                 "WHERE START_TIME <= (select dateadd(day,-var_value,current_date) from table(get_var(\'DAYS_TO_RETAIN\',\'VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE\',CURRENT_ACCOUNT(),CURRENT_REGION()))) " +
                                 "AND ACCOUNT_LOCATOR = CURRENT_ACCOUNT();"

        const statement_3 = snowflake.createStatement( {sqlText: my_sql_command_3} );
        const result_set_3 = statement_3.execute();
    }
    catch(err){
        const error = `Failed: Code: ${err.code}\\n  State: ${err.state}\\n  Message: ${err.message}\\n Stack Trace:\\n   ${err.stackTraceTxt}`;
        throw error;
    }
    finally{
        sql_commit_trans.execute();
    }
    return "Success";
  ';

SET TASK_SCHEDULE = (SELECT VAR_VALUE FROM table(get_var('TASK_SCHEDULE','TASK_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL',CURRENT_ACCOUNT(),CURRENT_REGION())));

CREATE OR REPLACE task CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL
    WAREHOUSE = ${TASK_WAREHOUSE}
    SCHEDULE = $TASK_SCHEDULE
AS
    CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL();

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL RESUME;

CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL();

CREATE OR REPLACE VIEW CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL AS
  SELECT DISTINCT
    QH.*,
    TO_DATE(QH.START_TIME) AS START_DATE,
    DATEDIFF(SECOND, START_TIME, END_TIME) AS ELAPSED_TIME_IN_SEC,
    floor(EXECUTION_TIME/1000) as EXECUTION_TIME_IN_SEC
        FROM TABLE(CDOPS_STATESTORE.REPORTING.RESOLVE_MEMBER_RESOURCE_MAPPING_UDF()) AS C, CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL_TABLE QH
  WHERE
         (C.WAREHOUSE_PATTERN IS NOT NULL AND RLIKE(QH.WAREHOUSE_NAME,C.WAREHOUSE_PATTERN)) OR
               (C.DATABASE_PATTERN IS NOT NULL AND RLIKE(QH.DATABASE_NAME,C.DATABASE_PATTERN))
  ORDER BY QH.START_TIME DESC;

-- rollback DROP VIEW IF EXISTS CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL;
-- rollback DROP TABLE IF EXISTS "CDOPS_STATESTORE"."REPORTING"."VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_TABLE";
-- rollback DROP TASK IF EXISTS  CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL;
-- rollback DROP PROCEDURE IF EXISTS  CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_READERACCOUNT_QUERY_HISTORY_FL();
