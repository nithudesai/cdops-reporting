--liquibase formatted sql
--preconditions onFail:HALT onError:HALT

--changeset ORG_USAGE_RATE_SHEET_DAILY:1 runOnChange:true stripComments:true
--labels: "ORG_USAGE_RATE_SHEET_DAILY or GENERIC"

DROP TABLE IF EXISTS CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_RATE_SHEET_DAILY_TABLE;
DROP TASK IF EXISTS  CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_RATE_SHEET_DAILY;
DROP PROCEDURE IF EXISTS  CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_RATE_SHEET_DAILY();
DROP VIEW IF EXISTS  CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_RATE_SHEET_DAILY;
DROP VIEW IF EXISTS CDOPS_STATESTORE.REPORTING.TABLE_VW_SNOWFLAKE_RATE_SHEET_DAILY;

create TRANSIENT TABLE IF NOT EXISTS CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE (
	SH_KEY BINARY(20),
	ORGANIZATION_NAME VARCHAR(16777216),
	ACCOUNT_LOCATOR VARCHAR(16777216),
	REGION VARCHAR(16777216),
    DATE DATE,
	CONTRACT_NUMBER NUMBER(38,0),
	ACCOUNT_NAME VARCHAR(16777216),
	SERVICE_LEVEL VARCHAR(16777216),
	USAGE_TYPE VARCHAR(16777216),
	CURRENCY VARCHAR(16777216),
	EFFECTIVE_RATE NUMBER(38,2),
	SERVICE_TYPE VARCHAR(256)
);

--Override CDOPS Variables
--UPDATE CDOPS_STATESTORE.REPORTING.CDOPS_VARIABLES SET VAR_VALUE='USING CRON 0 */3 * * * UTC'
--WHERE
--ACCOUNT_LOCATOR=CURRENT_ACCOUNT() AND
--REGION_NAME=CURRENT_REGION() AND
--VAR_USAGE='TASK_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY',
--VAR_NAME='TASK_SCHEDULE';

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY SUSPEND;

CREATE OR REPLACE PROCEDURE CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY()
  returns string not null
  language javascript
  as
  '
    const sql_begin_trans = snowflake.createStatement({ sqlText:`BEGIN TRANSACTION;`});
    const sql_commit_trans = snowflake.createStatement({ sqlText:`COMMIT;`});

    const sql_temp_table = snowflake.createStatement({ sqlText:
    `
    CREATE OR REPLACE TEMPORARY TABLE CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE_TEMP AS
        SELECT
         sha1_binary( concat(
                                  \'|\', ifnull( organization_name, \'~\' )
                                  ,\'|\', ifnull( contract_number, -9 )
                                  ,\'|\', ifnull( account_name, \'~\' )
                                  ,\'|\', ifnull( account_locator, \'~\' )
                                  ,\'|\', ifnull( service_level, \'~\' )
                                  ,\'|\', ifnull( usage_type, \'~\' )
                                  ,\'|\', to_char( date, \'yyyy-mmm-dd\'  )
                                 )
                          )   SH_KEY,
                              date, organization_name, contract_number,account_name,account_locator,region,
                              service_level,usage_type, currency, effective_rate, service_type
                           from
                               (
                                 SELECT
                                    DATE,ORGANIZATION_NAME,CONTRACT_NUMBER,ACCOUNT_NAME,ACCOUNT_LOCATOR,REGION,
                                    SERVICE_LEVEL,CURRENCY,EFFECTIVE_RATE,SERVICE_TYPE,
                                    case
                                        when usage_type=\'overage-adj for incl cloud services\' then \'adj for incl cloud services\'
                                        when usage_type=\'overage-automatic clustering\' then \'automatic clustering\'
                                        when usage_type=\'overage-cloud services\' then \'cloud services\'
                                        when usage_type=\'overage-compute\' then \'compute\'
                                        when usage_type=\'overage-snowpipe\' then \'snowpipe\'
                                        when usage_type=\'overage-materialized views\' then \'materialized views\'
                                        when usage_type=\'overage-search optimization\' then \'search optimization\'
                                        when usage_type=\'overage-serverless tasks\' then \'serverless tasks\'
                                        when usage_type=\'overage-replication\' then \'replication\'
                                        when usage_type=\'overage-storage\' then \'storage\'
                                        else usage_type
                                    end as usage_type
                                 FROM
                                    snowflake.organization_usage.RATE_SHEET_DAILY
                               ) RSD
                           where
                    date >= (select NVL(MAX(date),(SELECT MIN(DATE)::DATE AS DATE FROM snowflake.organization_usage.RATE_SHEET_DAILY)) from CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE);
    `
    });

    const sql_merge_table = snowflake.createStatement({ sqlText:
    `
        MERGE INTO CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE T USING CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE_TEMP S
        ON (T.SH_KEY = S.SH_KEY)
        WHEN NOT MATCHED THEN
        INSERT (SH_KEY,ORGANIZATION_NAME,ACCOUNT_LOCATOR,REGION,DATE,CONTRACT_NUMBER,ACCOUNT_NAME,SERVICE_LEVEL,USAGE_TYPE,CURRENCY,EFFECTIVE_RATE,SERVICE_TYPE)
        VALUES (S.SH_KEY,S.ORGANIZATION_NAME,S.ACCOUNT_LOCATOR,S.REGION,DATE,S.CONTRACT_NUMBER,S.ACCOUNT_NAME,S.SERVICE_LEVEL,S.USAGE_TYPE,S.CURRENCY,S.EFFECTIVE_RATE,S.SERVICE_TYPE);
    `
    });

    const sql_delete_table = snowflake.createStatement({ sqlText:
    `
        DELETE FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE
        WHERE DATE <= (select dateadd(day,-var_value,current_date) from table(get_var(\'DAYS_TO_RETAIN\',\'VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE\',CURRENT_ACCOUNT(),CURRENT_REGION())))
        AND ACCOUNT_LOCATOR = CURRENT_ACCOUNT();
    `
    });

    try{
        sql_begin_trans.execute();
        sql_temp_table.execute();
        sql_merge_table.execute();
        sql_delete_table.execute();

    }
    catch(err){
   const error = `Failed: Code: ${err.code}\\n  State: ${err.state}\\n  Message: ${err.message}\\n Stack Trace:\\n   ${err.stackTraceTxt}`;
   throw error;
               }
    finally{
        sql_commit_trans.execute();
    }
    return "Success";
  ';

SET TASK_SCHEDULE = (SELECT VAR_VALUE FROM table(get_var('TASK_SCHEDULE','TASK_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY',CURRENT_ACCOUNT(),CURRENT_REGION())));

CREATE OR REPLACE task CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY
    WAREHOUSE = ${TASK_WAREHOUSE}
    SCHEDULE = $TASK_SCHEDULE
AS
    CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY();

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY RESUME;

CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY();

DROP VIEW IF EXISTS CDOPS_STATESTORE.REPORTING.TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY;

CREATE OR REPLACE VIEW CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY AS
  SELECT DISTINCT
        CCD.*
    FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE CCD
    WHERE
      (
        select NVL(VALUE IS NOT NULL, FALSE) AS VALUE from table(flatten(input => parse_json(current_available_roles()))) WHERE VALUE='CDOPS_REPORT_SERVICE'
        );

CREATE OR REPLACE SECURE FUNCTION CDOPS_STATESTORE.REPORTING.RATE_SHEET_TIMESERIES(USAGETYPE STRING)
  RETURNS TABLE (USAGE_TYPE VARCHAR,RATE_DATE DATE,CONTRACT_NUMBER NUMBER(38,0),SERVICE_LEVEL VARCHAR,CURRENCY VARCHAR,EFFECTIVE_RATE NUMBER(38,2),SERVICE_TYPE VARCHAR)
  AS '
    WITH GET_MAX_DATE AS (
      SELECT
        MIN(DATE) MIN_DATE, CURRENT_DATE AS MAX_DATE, ACCOUNT_LOCATOR, REGION, USAGE_TYPE
      FROM
        CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY
      WHERE
        ACCOUNT_LOCATOR=CURRENT_ACCOUNT() AND USAGE_TYPE=USAGETYPE AND REGION=CURRENT_REGION()
      GROUP BY
         ACCOUNT_LOCATOR, USAGE_TYPE, REGION
    ),
    EXPAND_DATE_RECORDS AS (
        SELECT
            ACCOUNT_LOCATOR, USAGE_TYPE,REGION,
            Value::DATE AS DTRANGE
        FROM (
            SELECT
                ACCOUNT_LOCATOR, USAGE_TYPE,REGION,
                CDOPS_STATESTORE.REPORTING.DATERANGE(MIN_DATE::TIMESTAMP_LTZ,MAX_DATE::TIMESTAMP_LTZ) DTRANGE
            FROM GET_MAX_DATE
       ), LATERAL FLATTEN( input => parse_json(DTRANGE) )
    )
    ,
    BUILD_PARTIAL_TIMESERIES_DATA AS (
        SELECT
            E.ACCOUNT_LOCATOR,
            E.USAGE_TYPE,
            E.DTRANGE AS DATE,
            R.ORGANIZATION_NAME,
            E.REGION,
            R.CONTRACT_NUMBER,
            R.ACCOUNT_NAME,
            R.SERVICE_LEVEL,
            R.CURRENCY,
            R.EFFECTIVE_RATE,
            R.SERVICE_TYPE
        FROM
            EXPAND_DATE_RECORDS E LEFT OUTER JOIN CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY R
            ON
            E.ACCOUNT_LOCATOR = R.ACCOUNT_LOCATOR AND E.USAGE_TYPE = R.USAGE_TYPE AND E.DTRANGE = R.DATE AND E.REGION = R.REGION
        ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE
    ),
    BUILD_TIMESERIES_DATA AS (
        SELECT
            ACCOUNT_LOCATOR,
            REGION,
            USAGE_TYPE,
            DATE AS RATE_DATE,
            IFNULL(ORGANIZATION_NAME,
                    LAG(ORGANIZATION_NAME) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) ORGANIZATION_NAME,
            IFNULL(CONTRACT_NUMBER,
                    LAG(CONTRACT_NUMBER) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) CONTRACT_NUMBER,
            IFNULL(ACCOUNT_NAME,
                    LAG(ACCOUNT_NAME) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) ACCOUNT_NAME,
            IFNULL(SERVICE_LEVEL,
                    LAG(SERVICE_LEVEL) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) SERVICE_LEVEL,
            IFNULL(CURRENCY,
                    LAG(CURRENCY) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) CURRENCY,
            IFNULL(EFFECTIVE_RATE,
                    LAG(EFFECTIVE_RATE) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) EFFECTIVE_RATE,
            IFNULL(SERVICE_TYPE,
                    LAG(SERVICE_TYPE) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) SERVICE_TYPE
        FROM BUILD_PARTIAL_TIMESERIES_DATA
    )
    SELECT USAGE_TYPE,RATE_DATE,CONTRACT_NUMBER,SERVICE_LEVEL,CURRENCY,EFFECTIVE_RATE,SERVICE_TYPE FROM BUILD_TIMESERIES_DATA ORDER BY RATE_DATE DESC
 ';

CREATE OR REPLACE SECURE FUNCTION CDOPS_STATESTORE.REPORTING.RATE_SHEET_TIMESERIES_ALL_ACCOUNTS(USAGETYPE STRING)
  RETURNS TABLE (ACCOUNT_LOCATOR VARCHAR,REGION VARCHAR,USAGE_TYPE VARCHAR,RATE_DATE DATE,CONTRACT_NUMBER NUMBER(38,0),SERVICE_LEVEL VARCHAR,CURRENCY VARCHAR,EFFECTIVE_RATE NUMBER(38,2),SERVICE_TYPE VARCHAR)
  AS '
    WITH GET_MAX_DATE AS (
      SELECT
        MIN(DATE) MIN_DATE, CURRENT_DATE AS MAX_DATE, ACCOUNT_LOCATOR, REGION, USAGE_TYPE
      FROM
        CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY
      WHERE
        USAGE_TYPE=USAGETYPE
      GROUP BY
         ACCOUNT_LOCATOR, USAGE_TYPE, REGION
    ),
    EXPAND_DATE_RECORDS AS (
        SELECT
            ACCOUNT_LOCATOR, USAGE_TYPE,REGION,
            Value::DATE AS DTRANGE
        FROM (
            SELECT
                ACCOUNT_LOCATOR, USAGE_TYPE,REGION,
                CDOPS_STATESTORE.REPORTING.DATERANGE(MIN_DATE::TIMESTAMP_LTZ,MAX_DATE::TIMESTAMP_LTZ) DTRANGE
            FROM GET_MAX_DATE
       ), LATERAL FLATTEN( input => parse_json(DTRANGE) )
    )
    ,
    BUILD_PARTIAL_TIMESERIES_DATA AS (
        SELECT
            E.ACCOUNT_LOCATOR,
            E.USAGE_TYPE,
            E.DTRANGE AS DATE,
            R.ORGANIZATION_NAME,
            E.REGION,
            R.CONTRACT_NUMBER,
            R.ACCOUNT_NAME,
            R.SERVICE_LEVEL,
            R.CURRENCY,
            R.EFFECTIVE_RATE,
            R.SERVICE_TYPE
        FROM
            EXPAND_DATE_RECORDS E LEFT OUTER JOIN CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY R
            ON
            E.ACCOUNT_LOCATOR = R.ACCOUNT_LOCATOR AND E.USAGE_TYPE = R.USAGE_TYPE AND E.DTRANGE = R.DATE AND E.REGION = R.REGION
        ORDER BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE,DATE
    ),
    BUILD_TIMESERIES_DATA AS (
        SELECT
            ACCOUNT_LOCATOR,
            REGION,
            USAGE_TYPE,
            DATE AS RATE_DATE,
            IFNULL(ORGANIZATION_NAME,
                    LAG(ORGANIZATION_NAME) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) ORGANIZATION_NAME,
            IFNULL(CONTRACT_NUMBER,
                    LAG(CONTRACT_NUMBER) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) CONTRACT_NUMBER,
            IFNULL(ACCOUNT_NAME,
                    LAG(ACCOUNT_NAME) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) ACCOUNT_NAME,
            IFNULL(SERVICE_LEVEL,
                    LAG(SERVICE_LEVEL) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) SERVICE_LEVEL,
            IFNULL(CURRENCY,
                    LAG(CURRENCY) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) CURRENCY,
            IFNULL(EFFECTIVE_RATE,
                    LAG(EFFECTIVE_RATE) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) EFFECTIVE_RATE,
            IFNULL(SERVICE_TYPE,
                    LAG(SERVICE_TYPE) IGNORE NULLS OVER (PARTITION BY ACCOUNT_LOCATOR,REGION,USAGE_TYPE ORDER BY ACCOUNT_LOCATOR,USAGE_TYPE,DATE)
                  ) SERVICE_TYPE
        FROM BUILD_PARTIAL_TIMESERIES_DATA
    )
    SELECT ACCOUNT_LOCATOR,REGION,USAGE_TYPE,RATE_DATE,CONTRACT_NUMBER,SERVICE_LEVEL,CURRENCY,EFFECTIVE_RATE,SERVICE_TYPE FROM BUILD_TIMESERIES_DATA ORDER BY ACCOUNT_LOCATOR,REGION,RATE_DATE DESC
 ';

-- rollback DROP TABLE IF EXISTS "CDOPS_STATESTORE"."REPORTING"."VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY_TABLE";
-- rollback DROP TASK IF EXISTS  CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY;
-- rollback DROP PROCEDURE IF EXISTS  CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY();
-- rollback DROP VIEW IF EXISTS  CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY;
-- rollback DROP VIEW IF EXISTS CDOPS_STATESTORE.REPORTING.TABLE_VW_SNOWFLAKE_ORG_USAGE_RATE_SHEET_DAILY;
-- rollback DROP FUNCTION IF EXISTS CDOPS_STATESTORE.REPORTING.RATE_SHEET_TIMESERIES(STRING);
-- rollback DROP FUNCTION IF EXISTS CDOPS_STATESTORE.REPORTING.RATE_SHEET_TIMESERIES_ALL_ACCOUNTS(STRING);