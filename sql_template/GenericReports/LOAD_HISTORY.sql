--liquibase formatted sql
--preconditions onFail:HALT onError:HALT

--changeset LOAD_HISTORY:1 runOnChange:true stripComments:true
--labels: "LOAD_HISTORY or GENERIC"

DROP VIEW IF EXISTS  CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL;

CREATE TRANSIENT TABLE IF NOT EXISTS CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE (
	SH_KEY BINARY(20),
	ACCOUNT_LOCATOR VARCHAR(16777216),
	REGION_NAME VARCHAR(16777216),
    ORGANIZATION_NAME VARCHAR(16777216),
	TABLE_ID NUMBER(38,0),
	TABLE_NAME VARCHAR(16777216),
	SCHEMA_ID NUMBER(38,0),
	SCHEMA_NAME VARCHAR(16777216),
	CATALOG_ID NUMBER(38,0),
	CATALOG_NAME VARCHAR(16777216),
	FILE_NAME VARCHAR(16777216),
	LAST_LOAD_TIME TIMESTAMP_LTZ(6),
	STATUS VARCHAR(16777216),
	ROW_COUNT NUMBER(38,0),
	ROW_PARSED NUMBER(38,0),
	FIRST_ERROR_MESSAGE VARCHAR(16777216),
	FIRST_ERROR_LINE_NUMBER NUMBER(38,0),
	FIRST_ERROR_CHARACTER_POSITION NUMBER(38,0),
	FIRST_ERROR_COL_NAME VARCHAR(16777216),
	ERROR_COUNT NUMBER(38,0),
	ERROR_LIMIT NUMBER(38,0)
);


--Override CDOPS Variables
--UPDATE CDOPS_STATESTORE.REPORTING.CDOPS_VARIABLES SET VAR_VALUE='USING CRON 0 */3 * * * UTC'
--WHERE
--ACCOUNT_LOCATOR=CURRENT_ACCOUNT() AND
--REGION_NAME=CURRENT_REGION() AND
--VAR_USAGE='TASK_VW_SNOWFLAKE_LOAD_HISTORY_FL',
--VAR_NAME='TASK_SCHEDULE';

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_LOAD_HISTORY_FL SUSPEND;


CREATE OR REPLACE PROCEDURE CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_LOAD_HISTORY_FL()
  returns string not null
  language javascript
  as
  ' const sql_begin_trans = snowflake.createStatement({ sqlText:`BEGIN TRANSACTION;`});
    const sql_commit_trans = snowflake.createStatement({ sqlText:`COMMIT;`});
    
	const sql_temp_table = snowflake.createStatement({ sqlText:
	`
    CREATE OR REPLACE TEMPORARY TABLE CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE_TEMP AS 
         SELECT 
              sha1_binary( concat( CURRENT_REGION() 
                                      ,\'|\', T.ACCOUNT_LOCATOR  
                                       ,\'|\', ifnull( TABLE_NAME, \'~\' )  
                                       ,\'|\', ifnull( SCHEMA_NAME, \'~\' )  
                                       ,\'|\', ifnull( CATALOG_NAME, \'~\' )  
                                       ,\'|\', ifnull( FILE_NAME, \'~\' )  
                                      ,\'|\', to_char( LAST_LOAD_TIME, \'yyyy-mmm-dd hh24:mi:ss.FF3 TZHTZM\'  )  
                                      ) 
                               )   SH_KEY  
         ,T.ACCOUNT_LOCATOR AS ACCOUNT_LOCATOR  
         ,CURRENT_REGION() AS REGION_NAME  
         ,T.VAR_VALUE AS ORGANIZATION_NAME  
         ,TABLE_ID,TABLE_NAME,SCHEMA_ID,SCHEMA_NAME,CATALOG_ID,CATALOG_NAME,FILE_NAME  
         ,LAST_LOAD_TIME,STATUS,ROW_COUNT,ROW_PARSED,FIRST_ERROR_MESSAGE,FIRST_ERROR_LINE_NUMBER,FIRST_ERROR_CHARACTER_POSITION,FIRST_ERROR_COL_NAME  
         ,ERROR_COUNT,ERROR_LIMIT  
         FROM SNOWFLAKE.ACCOUNT_USAGE.LOAD_HISTORY  
         ,TABLE(get_var(\'ORGANIZATION\',\'GLOBAL\',CURRENT_ACCOUNT(),CURRENT_REGION())) T  
         WHERE (LAST_LOAD_TIME >= DATEADD(day,-30,CURRENT_TIMESTAMP()) AND LAST_LOAD_TIME <= CURRENT_TIMESTAMP()) AND  
         LAST_LOAD_TIME >= (SELECT NVL(MAX(LAST_LOAD_TIME),DATEADD(MONTH,-12,CURRENT_DATE)) FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE);
	`
	});	
    
    const sql_merge_table = snowflake.createStatement({ sqlText:
    `
	MERGE INTO CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE T USING CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE_TEMP S  
    ON (T.SH_KEY = S.SH_KEY) 
    WHEN NOT MATCHED THEN 
    INSERT (SH_KEY,ACCOUNT_LOCATOR,REGION_NAME,ORGANIZATION_NAME,TABLE_ID,TABLE_NAME,SCHEMA_ID,SCHEMA_NAME,CATALOG_ID,CATALOG_NAME,FILE_NAME,LAST_LOAD_TIME,STATUS,ROW_COUNT,ROW_PARSED,FIRST_ERROR_MESSAGE,FIRST_ERROR_LINE_NUMBER,FIRST_ERROR_CHARACTER_POSITION,FIRST_ERROR_COL_NAME,ERROR_COUNT,ERROR_LIMIT) 
    VALUES (S.SH_KEY,S.ACCOUNT_LOCATOR,S.REGION_NAME,S.ORGANIZATION_NAME,S.TABLE_ID,S.TABLE_NAME,S.SCHEMA_ID,S.SCHEMA_NAME,S.CATALOG_ID,S.CATALOG_NAME,S.FILE_NAME,S.LAST_LOAD_TIME,S.STATUS,S.ROW_COUNT,S.ROW_PARSED,S.FIRST_ERROR_MESSAGE,S.FIRST_ERROR_LINE_NUMBER,S.FIRST_ERROR_CHARACTER_POSITION,S.FIRST_ERROR_COL_NAME,S.ERROR_COUNT,S.ERROR_LIMIT);
	`
	})	;

    const sql_delete_table = snowflake.createStatement({ sqlText:
    `
	DELETE FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE  
    WHERE LAST_LOAD_TIME <= (select dateadd(day,-var_value,current_date) from table(get_var(\'DAYS_TO_RETAIN\',\'VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE\',CURRENT_ACCOUNT(),CURRENT_REGION()))) 
    AND ACCOUNT_LOCATOR = CURRENT_ACCOUNT();
	`
	});

    try{
        sql_begin_trans.execute();
        sql_temp_table.execute();
        sql_merge_table.execute();
        sql_delete_table.execute();

    }
	
    catch(err){
   const error = `Failed: Code: ${err.code}\\n  State: ${err.state}\\n  Message: ${err.message}\\n Stack Trace:\\n   ${err.stackTraceTxt}`;
   throw error;
               }
    finally{
        sql_commit_trans.execute();
    }
    return "Success";
  ';
  
  
SET TASK_SCHEDULE = (SELECT VAR_VALUE FROM table(get_var('TASK_SCHEDULE','TASK_VW_SNOWFLAKE_LOAD_HISTORY_FL',CURRENT_ACCOUNT(),CURRENT_REGION())));

CREATE OR REPLACE task CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_LOAD_HISTORY_FL
    WAREHOUSE = ${TASK_WAREHOUSE}
    SCHEDULE = $TASK_SCHEDULE
AS
    CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_LOAD_HISTORY_FL();

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_LOAD_HISTORY_FL RESUME;

CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_LOAD_HISTORY_FL();

CREATE OR REPLACE VIEW CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_LOAD_HISTORY_FL AS
  SELECT DISTINCT
  CH.*
        FROM TABLE(CDOPS_STATESTORE.REPORTING.RESOLVE_MEMBER_RESOURCE_MAPPING_UDF()) AS C, CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE CH
  WHERE
      (RLIKE(CATALOG_NAME,C.DATABASE_PATTERN) OR RLIKE(CATALOG_NAME,C.DATABASE_PATTERN))
  ORDER BY LAST_LOAD_TIME DESC;
-- rollback DROP VIEW IF EXISTS CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_LOAD_HISTORY_FL;
-- rollback DROP TABLE "CDOPS_STATESTORE"."REPORTING"."VW_SNOWFLAKE_LOAD_HISTORY_FL_TABLE";
-- rollback DROP TASK IF EXISTS  CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_LOAD_HISTORY_FL;
-- rollback DROP PROCEDURE IF EXISTS  CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_LOAD_HISTORY_FL();
