--liquibase formatted sql
--preconditions onFail:HALT onError:HALT

--changeset GRANT_TO_ROLES:1 runOnChange:true stripComments:true
--labels: "GRANT_TO_ROLES or GENERIC"

--Override CDOPS Variables
--UPDATE CDOPS_STATESTORE.REPORTING.CDOPS_VARIABLES SET VAR_VALUE='USING CRON 0 5 * * * UTC'
--WHERE
--ACCOUNT_LOCATOR=CURRENT_ACCOUNT() AND
--REGION_NAME=CURRENT_REGION() AND
--VAR_USAGE='TASK_VW_SNOWFLAKE_GRANT_TO_ROLES',
--VAR_NAME='TASK_SCHEDULE';

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_GRANT_TO_ROLES SUSPEND;

CREATE OR REPLACE PROCEDURE CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_GRANT_TO_ROLES()
  returns string not null
  language javascript
  as
  '
    var my_sql_command = ""
    var my_sql_command_1 = "CREATE OR REPLACE TRANSIENT TABLE CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_GRANT_TO_ROLES_TABLE AS " +
                            "select  "+
                                "T.ACCOUNT_LOCATOR AS ACCOUNT_LOCATOR " +
                                ",CURRENT_REGION() AS REGION_NAME " +
                                ",CREATED_ON,MODIFIED_ON,DELETED_ON,PRIVILEGE,GRANTED_ON,NAME,TABLE_CATALOG,TABLE_SCHEMA,GRANTED_TO,GRANTEE_NAME " +
                                ", T.VAR_VALUE AS ORGANIZATION_NAME " +
                            "from " +
                                "snowflake.account_usage.GRANTS_TO_ROLES g, " +
                                "table(get_var(\'ORGANIZATION\',\'GLOBAL\',CURRENT_ACCOUNT(),CURRENT_REGION())) T ;"

    var statement_1 = snowflake.createStatement( {sqlText: my_sql_command_1} );
    var result_set_1 = statement_1.execute();

    var my_sql_command = my_sql_command_1;

    return my_sql_command; // Statement returned for info/debug purposes
  ';

SET TASK_SCHEDULE = (SELECT VAR_VALUE FROM table(get_var('TASK_SCHEDULE','TASK_VW_SNOWFLAKE_GRANT_TO_ROLES',CURRENT_ACCOUNT(),CURRENT_REGION())));

CREATE OR REPLACE task CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_GRANT_TO_ROLES
    WAREHOUSE = ${TASK_WAREHOUSE}
    SCHEDULE =  $TASK_SCHEDULE
AS
    CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_GRANT_TO_ROLES();

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_GRANT_TO_ROLES RESUME;

CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_GRANT_TO_ROLES();

CREATE OR REPLACE VIEW CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_GRANT_TO_ROLES AS
with roles as (
    select VALUE from table(flatten(input => parse_json(current_available_roles())))
)
SELECT
g.*
FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_GRANT_TO_ROLES_TABLE g,roles r
WHERE r.VALUE=g.GRANTEE_NAME;

-- rollback DROP IF EXISTS TABLE CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_GRANT_TO_ROLES_TABLE;
-- rollback DROP IF EXISTS TASK IF EXISTS  CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_GRANT_TO_ROLES;
-- rollback DROP IF EXISTS PROCEDURE IF EXISTS  CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_GRANT_TO_ROLES();
-- rollback DROP IF EXISTS VIEW CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_GRANT_TO_ROLES;