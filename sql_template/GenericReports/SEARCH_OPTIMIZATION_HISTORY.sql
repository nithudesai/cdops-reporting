--liquibase formatted sql
--preconditions onFail:HALT onError:HALT

--changeset SEARCH_OPTIMIZATION_HISTORY:1 runOnChange:true stripComments:true
--labels: "SEARCH_OPTIMIZATION_HISTORY or GENERIC"

DROP VIEW IF EXISTS CDOPS_STATESTORE.REPORTING.VW_SNOWFALKE_SEARCH_OPTIMIZATION_HISTORY;

CREATE TRANSIENT TABLE IF NOT EXISTS CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE (
	SH_KEY BINARY(20),
	ACCOUNT_LOCATOR VARCHAR(16777216),
	REGION_NAME VARCHAR(16777216),
    ORGANIZATION_NAME VARCHAR(16777216),
	START_DATE DATE,
	OPERATION_HOURS NUMBER(9,0),
	TIME_OF_DAY TIME(9),
  	START_TIME TIMESTAMP_LTZ(6),
	END_TIME TIMESTAMP_LTZ(9),
	CREDITS_USED NUMBER(38,9),
	TABLE_ID NUMBER(38,0),
	TABLE_NAME VARCHAR(16777216),
	SCHEMA_ID NUMBER(38,0),
	SCHEMA_NAME VARCHAR(16777216),
	DATABASE_ID NUMBER(38,0),
	DATABASE_NAME VARCHAR(16777216)
);

--Override CDOPS Variables
--UPDATE CDOPS_STATESTORE.REPORTING.CDOPS_VARIABLES SET VAR_VALUE='USING CRON 0 */3 * * * UTC'
--WHERE
--ACCOUNT_LOCATOR=CURRENT_ACCOUNT() AND
--REGION_NAME=CURRENT_REGION() AND
--VAR_USAGE='TASK_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY',
--VAR_NAME='TASK_SCHEDULE';

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY SUSPEND;

CREATE OR REPLACE PROCEDURE CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY()
  returns string not null
  language javascript
  as
  '
    const sql_begin_trans = snowflake.createStatement({ sqlText:`BEGIN TRANSACTION;`});
    const sql_commit_trans = snowflake.createStatement({ sqlText:`COMMIT;`});
        const sql_temp_table = snowflake.createStatement({ sqlText:
    `
    CREATE OR REPLACE TEMPORARY TABLE CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TEMP AS
      SELECT
           sha1_binary( concat( CURRENT_REGION()
                                   ,\'|\', T.ACCOUNT_LOCATOR
                                    ,\'|\', ifnull( database_name, \'~\' )
                                    ,\'|\', ifnull( schema_name, \'~\' )
                                    ,\'|\', ifnull( table_name, \'~\' )
                                    ,\'|\', to_char( start_time, \'yyyy-mmm-dd hh24:mi:ss.FF3 TZHTZM\'  )
                                   )
                            )   SH_KEY,
          T.ACCOUNT_LOCATOR AS ACCOUNT_LOCATOR,
          CURRENT_REGION() AS REGION_NAME,
          TO_DATE(START_TIME) AS START_DATE,
          DATEDIFF(HOUR, START_TIME, END_TIME) AS OPERATION_HOURS,
          TO_TIME(START_TIME) AS TIME_OF_DAY,
          START_TIME,
          END_TIME,
          CREDITS_USED,
           TABLE_ID,
          TABLE_NAME,
          SCHEMA_ID,
          SCHEMA_NAME,
          DATABASE_ID,
          DATABASE_NAME,
         T.VAR_VALUE AS ORGANIZATION_NAME
      FROM SNOWFLAKE.ACCOUNT_USAGE.SEARCH_OPTIMIZATION_HISTORY , table(get_var(\'ORGANIZATION\',\'GLOBAL\',CURRENT_ACCOUNT(),CURRENT_REGION())) T
      WHERE START_TIME >= (SELECT NVL(MAX(START_TIME),DATEADD(MONTH,-12,CURRENT_DATE)) FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE);
`
    });

    const sql_merge_table = snowflake.createStatement({ sqlText:
    `
    MERGE INTO CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE T USING CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TEMP S
    ON (T.SH_KEY = S.SH_KEY)
    WHEN NOT MATCHED THEN
    INSERT (SH_KEY,ACCOUNT_LOCATOR,REGION_NAME,ORGANIZATION_NAME,START_DATE,OPERATION_HOURS,TIME_OF_DAY,START_TIME,END_TIME,CREDITS_USED,TABLE_ID,TABLE_NAME,SCHEMA_ID,SCHEMA_NAME,DATABASE_ID,DATABASE_NAME)
    VALUES (S.SH_KEY,S.ACCOUNT_LOCATOR,S.REGION_NAME,S.ORGANIZATION_NAME,S.START_DATE,S.OPERATION_HOURS,S.TIME_OF_DAY,S.START_TIME,S.END_TIME,S.CREDITS_USED,S.TABLE_ID,S.TABLE_NAME,S.SCHEMA_ID,S.SCHEMA_NAME,S.DATABASE_ID,S.DATABASE_NAME);

    `
    });

    const sql_delete_table = snowflake.createStatement({ sqlText:
    `
    DELETE FROM CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE
    WHERE START_TIME <= (select dateadd(day,-var_value,current_date) from table(get_var(\'DAYS_TO_RETAIN\',\'VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE\',CURRENT_ACCOUNT(),CURRENT_REGION())))
    AND ACCOUNT_LOCATOR = CURRENT_ACCOUNT();
    `
    });
    try{
        sql_begin_trans.execute();
        sql_temp_table.execute();
        sql_merge_table.execute();
        sql_delete_table.execute();

    }
    catch(err){
   const error = `Failed: Code: ${err.code}\\n  State: ${err.state}\\n  Message: ${err.message}\\n Stack Trace:\\n   ${err.stackTraceTxt}`;
   throw error;
               }
    finally{
        sql_commit_trans.execute();
    }
    return "Success";
  ';

SET TASK_SCHEDULE = (SELECT VAR_VALUE FROM table(get_var('TASK_SCHEDULE','TASK_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY',CURRENT_ACCOUNT(),CURRENT_REGION())));

CREATE OR REPLACE task CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY
    WAREHOUSE = ${TASK_WAREHOUSE}
    SCHEDULE = $TASK_SCHEDULE
AS
    CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY();

ALTER TASK IF EXISTS CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY RESUME;

CALL CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY();

CREATE OR REPLACE SECURE VIEW CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY AS
  SELECT DISTINCT
      CCD.*, datediff(second, CCD.START_TIME, CCD.END_TIME) AS ELAPSED_TIME_IN_SEC,
      IFF(COMPUTE.COMPUTE_RATE IS NOT NULL, CCD.CREDITS_USED*COMPUTE.COMPUTE_RATE, 0) CREDITS_USED_EFFECTIVE_RATE,
      COMPUTE.CURRENCY
  FROM
      TABLE(CDOPS_STATESTORE.REPORTING.RESOLVE_MEMBER_RESOURCE_MAPPING_UDF()) AS C,
      CDOPS_STATESTORE.REPORTING.VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE CCD LEFT OUTER JOIN
      (
        SELECT
            COMPUTE.RATE_DATE,
            COMPUTE.CURRENCY,
            COMPUTE.EFFECTIVE_RATE COMPUTE_RATE
        FROM
            TABLE(CDOPS_STATESTORE.REPORTING.RATE_SHEET_TIMESERIES('search optimization')) COMPUTE
      ) COMPUTE
      ON CCD.START_TIME::DATE = COMPUTE.RATE_DATE
  WHERE
      C.DATABASE_PATTERN IS NOT NULL AND RLIKE(CCD.DATABASE_NAME,C.DATABASE_PATTERN)
  ORDER BY START_DATE DESC;

-- rollback DROP TABLE IF EXISTS "CDOPS_STATESTORE"."REPORTING"."VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY_TABLE";
-- rollback DROP TASK IF EXISTS  CDOPS_STATESTORE.REPORTING.TASK_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY;
-- rollback DROP PROCEDURE IF EXISTS  CDOPS_STATESTORE.REPORTING.SP_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY();
-- rollback DROP VIEW IF EXISTS  CDOPS_STATESTORE.REPORTING_EXT.EXTENDED_TABLE_VW_SNOWFLAKE_SEARCH_OPTIMIZATION_HISTORY;